#!/usr/bin/env python3

"""
Creates the FM Synthesis diagram used in the 'Yamaha DX7 Technical Analysis' article.
"""

import math
import matplotlib.pyplot as plt

__author__ = "AJXS"
__copyright__ = "Copyright 2024, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.1"
__maintainer__ = "AJXS"
__email__ = "ajxs [at] panoptic.online"
__status__ = "Production"

SAMPLE_RATE = 49096
PLOT_SAMPLES = int(SAMPLE_RATE / 100)
PLOT_Y_LIMIT = 1.1

FREQ_MODULATOR = 880
FREQ_CARRIER = 440

TABLE_LENGTH_SIN = 4096
# The amount by which the modulating oscillator's amplitude will be scaled to
# affect the carrier oscillator's frequency.
MODULATION_AMOUNT = 1024

samples_modulator = []
samples_carrier = []
samples_fm = []

table_sin = [math.sin((2.0 * math.pi) * (i / TABLE_LENGTH_SIN)) for i in range(TABLE_LENGTH_SIN)]

def get_phase_increment(frequency):
    """Gets the correct phase increment for the specified oscillator frequency."""
    return frequency / SAMPLE_RATE * TABLE_LENGTH_SIN


def table_sin_lookup(phase):
    """
    Gets the sine table amplitude associated with the specified phase.
    Note that negative phase values will wrap around.
    """
    return table_sin[int(phase) % TABLE_LENGTH_SIN]


def create_fm_diagram():
    """Creates the final FM diagram."""

    phase_accumulator_modulator = 0
    phase_accumulator_carrier = 0

    phase_increment_modulator = get_phase_increment(FREQ_MODULATOR)
    phase_increment_carrier = get_phase_increment(FREQ_CARRIER)

    for _ in range(PLOT_SAMPLES):
        amplitude_modulator = table_sin_lookup(phase_accumulator_modulator)
        amplitude_carrier = table_sin_lookup(phase_accumulator_carrier)

        samples_modulator.append(amplitude_modulator)
        samples_carrier.append(amplitude_carrier)

        phase_accumulator_modulator += phase_increment_modulator
        phase_accumulator_carrier += phase_increment_carrier

        phi = phase_accumulator_carrier + (amplitude_modulator * MODULATION_AMOUNT)

        samples_fm.append(table_sin_lookup(phi))

    _, ax = plt.subplots(3, tight_layout=True)

    ax[0].title.set_text(f"Modulator: {FREQ_MODULATOR} Hz")
    ax[0].plot(samples_modulator)
    ax[0].set_ylim(-PLOT_Y_LIMIT, PLOT_Y_LIMIT)
    ax[0].set_xticks([])
    ax[0].set_yticks([])

    ax[1].title.set_text(f"Carrier: {FREQ_CARRIER} Hz")
    ax[1].plot(samples_carrier)
    ax[1].set_ylim(-PLOT_Y_LIMIT, PLOT_Y_LIMIT)
    ax[1].set_xticks([])
    ax[1].set_yticks([])


    ax[2].title.set_text("Modulated Carrier")
    ax[2].plot(samples_fm)
    ax[2].set_xticks([])
    ax[2].set_yticks([])

    plt.savefig("frequency_modulation.png", dpi=400, pad_inches=1)


if __name__ == "__main__":
    create_fm_diagram()
