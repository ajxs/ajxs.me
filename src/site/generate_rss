#!/usr/bin/env python3

"""
Generates the site RSS feed.
"""

from datetime import datetime
import os
import email.utils
from lxml import etree
import pytz
from blog import load_blog_entries

__author__ = "AJXS"
__copyright__ = "Copyright 2020, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The RSS channel title.
CHANNEL_TITLE = "~ajxs"
# The RSS channel link.
CHANNEL_LINK = "https://ajxs.me"
# The RSS channel description.
CHANNEL_DESC = "Ajxs blog"
# The channel webmaster email string.
# Re: format, refer to: https://www.rssboard.org/rss-profile#data-types-email
CHANNEL_WEBMASTER = "ajxs@panoptic.online (Anthony)"
# The destination folder for the distributable artifacts.
DIST_FOLDER = f"{os.getcwd()}/dist"
# The path to save the resulting RSS feed file in.
RSS_FILE_PATH = f"{DIST_FOLDER}/site.rss"
# The W3C Atom namespace URI.
ATOM_NAMESPACE_URI = "http://www.w3.org/2005/Atom"


def generate_entry_item(entry):
    """
    Generates XML for a blog entry.
    """

    # The article publish date.
    publish_date = email.utils.format_datetime(entry["date_created"])
    # The link to the individual article.
    article_link = f"{CHANNEL_LINK}/blog/{entry['filename']}.html"

    item_root = etree.Element("item")
    item_title_el = etree.SubElement(item_root, "title")
    item_title_el.text = entry["title"]
    item_link_el = etree.SubElement(item_root, "link")
    item_link_el.text = article_link
    item_desc_el = etree.SubElement(item_root, "description")
    item_desc_el.text = entry["short"]
    item_pub_date_el = etree.SubElement(item_root, "pubDate")
    item_pub_date_el.text = publish_date
    # Refer to: https://validator.w3.org/feed/docs/warning/MissingGuid.html
    # https://cyber.harvard.edu/rss/rss.html#ltguidgtSubelementOfLtitemgt
    item_guid_el = etree.SubElement(item_root, "guid")
    item_guid_el.text = article_link

    for tag in entry["tags"]:
        category_el = etree.SubElement(item_root, "category")
        category_el.text = tag["name"]

    return item_root


def main():
    """
    Main program.
    """

    # All blog entries.
    blog_entries = load_blog_entries()

    # The latest article publish date.
    publish_date = email.utils.format_datetime(blog_entries[0]["date_created"])
    # The last build date, typically 'now'.
    last_build_date = email.utils.format_datetime(datetime.now(pytz.timezone('Australia/Sydney')))

    # Attach the 'atom' namespace to the root element.
    rss_root = etree.Element("rss", version="2.0", nsmap={"atom": ATOM_NAMESPACE_URI})
    rss_tree = etree.ElementTree(rss_root)

    channel_el = etree.SubElement(rss_root, "channel")

    channel_title_el = etree.SubElement(channel_el, "title")
    channel_title_el.text = CHANNEL_TITLE
    channel_link_el = etree.SubElement(channel_el, "link")
    channel_link_el.text = CHANNEL_LINK
    channel_desc_el = etree.SubElement(channel_el, "description")
    channel_desc_el.text = CHANNEL_DESC
    channel_lang_el = etree.SubElement(channel_el, "language")
    channel_lang_el.text = "en-us"
    channel_pub_date_el = etree.SubElement(channel_el, "pubDate")
    channel_pub_date_el.text = publish_date
    channel_build_date_el = etree.SubElement(channel_el, "lastBuildDate")
    channel_build_date_el.text = last_build_date
    channel_webmaster_el = etree.SubElement(channel_el, "webMaster")
    channel_webmaster_el.text = CHANNEL_WEBMASTER

    # Create the self-referential link.
    # Refer to: https://validator.w3.org/feed/docs/warning/MissingAtomSelfLink.html
    etree.SubElement(
        channel_el,
        "{http://www.w3.org/2005/Atom}link",
        href=f"{CHANNEL_LINK}/site.rss",
        rel="self",
        type="application/rss+xml"
    )

    # Add XML for each individual entry.
    for entry in blog_entries:
        entry_xml = generate_entry_item(entry)
        channel_el.insert(len(channel_el), entry_xml)

    # Write the document to a file.
    rss_tree.write(RSS_FILE_PATH, encoding="UTF-8", xml_declaration=True)

    print(f"Wrote RSS feed file: '{RSS_FILE_PATH}'")

if __name__ == "__main__":
    main()
