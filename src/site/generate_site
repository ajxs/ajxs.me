#!/usr/bin/env python3

"""
Generates all of the static content for the site, as part of the full deployment artefact.
This script generates all of the page content from the blog SQLite database.
"""

from string import Template
from datetime import datetime
import os
from blog import load_blog_entries, load_tags, load_tagged_entries

__author__ = "AJXS"
__copyright__ = "Copyright 2020, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The main title for the blog. This is used to create all of the
# <title>$page_title</title> elements.
MAIN_PAGE_TITLE = "~ajxs"

# Page meta tag contents.
PAGE_META_DEFAULT_DESCRIPTION = "ajxs personal site"
PAGE_META_DEFAULT_KEYWORDS = "ajxs, synthesisers, programming, dsp"
PAGE_META_AUTHOR = "ajxs"
PAGE_META_EMAIL = "ajxs@panoptic.online"

# The destination folder for the distributable artifacts.
DIST_FOLDER = f"{os.getcwd()}/docs"
# The base template folder.
TEMPLATE_FOLDER = f"{os.getcwd()}/src/site/template"
# The destination folder for generated blog entries.
DIST_BLOG_ENTRIES_FOLDER = DIST_FOLDER + "/blog"
# The copyright text displayed in the page footer.
COPYRIGHT_TEXT = f"Â© {datetime.today().year} AJXS"

# The blog entry template.
BLOG_ENTRY_TEMPLATE = None
# Template for the tags in the blog entry header.
BLOG_ENTRY_TAGS_TEMPLATE = None
# Blog entry index link template.
BLOG_ENTRY_INDEX_TEMPLATE = None
# Blog entry index link tags template.
BLOG_ENTRY_INDEX_TAGS_TEMPLATE = None
# The main site index template.
INDEX_TEMPLATE = None
# The main page template.
MAIN_PAGE_TEMPLATE = None
# The index template for a particular tag.
TAG_INDEX_TEMPLATE = None

# Open and parse each of the template HTML files.
with open(f"{TEMPLATE_FOLDER}/entry.html", mode='r') as template_file:
    BLOG_ENTRY_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/entry_tags.html", mode='r') as template_file:
    BLOG_ENTRY_TAGS_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/index.html", mode='r') as template_file:
    INDEX_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/index_entry.html", mode='r') as template_file:
    BLOG_ENTRY_INDEX_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/index_entry_tags.html", mode='r') as template_file:
    BLOG_ENTRY_INDEX_TAGS_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/main_page.html", mode='r') as template_file:
    MAIN_PAGE_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/tag_index.html", mode='r') as template_file:
    TAG_INDEX_TEMPLATE = Template(template_file.read())


def create_blog_entry_file(entry):
    """
    Creates an individual blog entry HTML file from a parsed entry.
    """

    # Fail if the template has not been loaded.
    if BLOG_ENTRY_TEMPLATE is None or BLOG_ENTRY_TAGS_TEMPLATE is None:
        raise ValueError("Blog entry templates are not loaded")

    # The HTML to display the entry tags.
    entry_tag_list_html = ""
    # The HTML to display the entry tag list.
    entry_tags_html = ""
    # The full page HTML. This is the Index HTML baked in to the main page template.
    full_file_html = ""

    # If there are tags in this entry, create the tag HTML.
    if entry["tags"]:
        for tag in entry["tags"]:
            tag_link = f"/blog/tag/{tag['filename']}.html"
            entry_tag_list_html += f"<li><a href=\"{tag_link}\">{tag['name']}</a></li>"

        entry_tags_html = BLOG_ENTRY_TAGS_TEMPLATE.substitute(
            entry_tag_list=entry_tag_list_html
        )

    # The formatted creation date.
    date_created = entry["date_created"].strftime("%Y.%m.%d")

    # An array of tag names.
    tag_names = list(map(lambda tag : tag['name'], entry['tags']))
    # The meta keywords string.
    page_keywords_string = ", ".join(tag_names)

    # The final resulting entry HTML.
    entry_html = BLOG_ENTRY_TEMPLATE.substitute(
        title=entry["title"],
        date=date_created,
        short=entry["short"],
        entry_body=entry["body"],
        entry_tags=entry_tags_html
    )

    # Create the full page HTML.
    full_file_html = MAIN_PAGE_TEMPLATE.substitute(
        page_title=f"{MAIN_PAGE_TITLE}/{entry['title']}",
        page_html=entry_html,
        copyright_text=COPYRIGHT_TEXT,
        page_meta_description=entry["short"],
        page_meta_author=PAGE_META_AUTHOR,
        page_meta_email=PAGE_META_EMAIL,
        page_meta_keywords=page_keywords_string
    )

    # The final filename for the blog entry HTML.
    blog_entry_filename = f"{DIST_BLOG_ENTRIES_FOLDER}/{entry['filename']}.html"
    with open(blog_entry_filename, 'x') as blog_entry_file:
        blog_entry_file.write(full_file_html)

    print(f"Wrote blog entry file: {blog_entry_filename}")


def create_tag_pages():
    """
    Creates all of the individual tag index pages.
    """

    # Fail if the template has not been loaded.
    if TAG_INDEX_TEMPLATE is None or INDEX_TEMPLATE is None:
        raise ValueError("Templates are not loaded")

    # All of the tags used in the blog.
    tags = load_tags()

    for tag in tags:
        # All of the entries tagged with this specific tag.
        tagged_entries = load_tagged_entries(tag)
        # The HTML for the blog entries in the index.
        index_entries_html = ""

        for entry in tagged_entries:
            # The formatted creation date.
            date_created = entry["date_created"].strftime("%Y.%m.%d")

            # For each entry generate the blog entry HTML and add this to the index
            # entries HTML string.
            index_entries_html += BLOG_ENTRY_INDEX_TEMPLATE.substitute(
                entry_link=f"/blog/{entry['filename']}.html",
                date=date_created,
                title=entry["title"],
                short=entry["short"],
                entry_tags=""
            )

        # Create the index HTML.
        index_html = TAG_INDEX_TEMPLATE.substitute(
            tag_name=tag["name"],
            tagged_entries=index_entries_html
        )

        # The page meta description.
        tag_page_description = f"Blog entries marked {tag['name']}"

        # The full page HTML. This is the Index HTML baked in to the main page template.
        full_file_html = MAIN_PAGE_TEMPLATE.substitute(
            page_title=f"{MAIN_PAGE_TITLE}/{tag['name']}",
            page_html=index_html,
            copyright_text=COPYRIGHT_TEXT,
            page_meta_description=tag_page_description,
            page_meta_author=PAGE_META_AUTHOR,
            page_meta_email=PAGE_META_EMAIL,
            page_meta_keywords=tag['name']
        )

        # The final filename of the tag index HTML file.
        tag_index_filename = f"{DIST_FOLDER}/blog/tag/{tag['filename']}.html"
        with open(tag_index_filename, 'x') as index_file:
            index_file.write(full_file_html)

        print(f"Wrote tag index file: {tag_index_filename}")


def create_index(entries):
    """
    Creates the site index.
    """

    # Fail if the required templates have not been loaded.
    if BLOG_ENTRY_INDEX_TEMPLATE is None or INDEX_TEMPLATE is None:
        raise ValueError("Templates are not loaded")

    # The HTML for the blog entries in the index.
    index_entries_html = ""
    # The HTML for the site index.
    index_html = ""

    for entry in entries:
        # The link to the blog entry.
        entry_link = f"blog/{entry['filename']}.html"
        # The HTML to display the entry tags.
        entry_tag_list_html = ""
        # The HTML to display the entry tag list.
        entry_tags_html = ""

        # If there are tags in this entry, create the tag HTML.
        if entry["tags"]:
            for tag in entry["tags"]:
                entry_tag_link = f"blog/tag/{tag['filename']}.html"
                entry_tag_list_html += f"<li><a href=\"{entry_tag_link}\">{tag['name']}</a></li>"

            entry_tags_html = BLOG_ENTRY_INDEX_TAGS_TEMPLATE.substitute(
                entry_tag_list=entry_tag_list_html
            )

        # The formatted creation date.
        date_created = entry["date_created"].strftime("%Y.%m.%d")

        # For each entry generate the blog entry HTML and add this to the index entries
        # HTML string.
        index_entries_html += BLOG_ENTRY_INDEX_TEMPLATE.substitute(
            entry_link=entry_link,
            date=date_created,
            title=entry["title"],
            short=entry["short"],
            entry_tags=entry_tags_html
        )

    # Create the index HTML.
    index_html = INDEX_TEMPLATE.substitute(blog_entries=index_entries_html)

    # The full page HTML. This is the Index HTML baked in to the main page template.
    full_file_html = MAIN_PAGE_TEMPLATE.substitute(
        page_title=MAIN_PAGE_TITLE,
        page_html=index_html,
        copyright_text=COPYRIGHT_TEXT,
        page_meta_description=PAGE_META_DEFAULT_DESCRIPTION,
        page_meta_author=PAGE_META_AUTHOR,
        page_meta_email=PAGE_META_EMAIL,
        page_meta_keywords=PAGE_META_DEFAULT_KEYWORDS
    )

    with open(f"{DIST_FOLDER}/index.html", 'x') as index_file:
        index_file.write(full_file_html)

    print("Wrote index.html")


def main():
    """
    Main program.
    """

    # Load all of the individual blog entries from the database.
    blog_entries = load_blog_entries()

    # Create all of the individual blog entry files.
    for entry in blog_entries:
        create_blog_entry_file(entry)

    # Creates the tag index pages.
    create_tag_pages()

    # Creates the site index.
    create_index(blog_entries)


if __name__ == "__main__":
    main()
