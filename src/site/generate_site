#!/usr/bin/env python3

"""
Generates all of the static content for the site, as part of the full deployment artefact.
This script generates all of the page content from the blog SQLite database.
"""

from string import Template
from datetime import datetime
import os
from site_data import load_blog_entries, load_tags, load_tagged_entries, load_static_pages

__author__ = "AJXS"
__copyright__ = "Copyright 2020, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The main title for the blog. This is used to create all of the
# <title>$page_title</title> elements.
MAIN_PAGE_TITLE = "~ajxs"

# Page meta tag contents.
PAGE_META_DEFAULT_DESCRIPTION = "ajxs personal site"
PAGE_META_DEFAULT_KEYWORDS = "ajxs, synthesisers, programming, dsp"
PAGE_META_AUTHOR = "ajxs"
PAGE_META_EMAIL = "ajxs@panoptic.online"

# The destination folder for the distributable artifacts.
DIST_FOLDER = f"{os.getcwd()}/docs"
# The base template folder.
TEMPLATE_FOLDER = f"{os.getcwd()}/src/site/template"
# The destination folder for generated blog entries.
DIST_BLOG_ENTRIES_FOLDER = DIST_FOLDER + "/blog"
# The copyright text displayed in the page footer.
COPYRIGHT_TEXT = f"Â© {datetime.today().year} AJXS"

# The blog entry template.
BLOG_ENTRY_TEMPLATE = None
# Template for the tags in the blog entry header.
BLOG_ENTRY_TAGS_TEMPLATE = None
# Blog entry index link template.
BLOG_ENTRY_INDEX_TEMPLATE = None
# Blog entry index link tags template.
BLOG_ENTRY_INDEX_TAGS_TEMPLATE = None
# The template for a particular blog index.
BLOG_INDEX_TEMPLATE = None
# The main site index template.
INDEX_TEMPLATE = None
# The main page template.
MAIN_PAGE_TEMPLATE = None
# The number of the latest blog posts to show on the main site index.
MAIN_INDEX_BLOG_POST_LENGTH = 10

# Open and parse each of the template HTML files.
with open(f"{TEMPLATE_FOLDER}/entry.html", mode='r') as template_file:
    BLOG_ENTRY_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/entry_tags.html", mode='r') as template_file:
    BLOG_ENTRY_TAGS_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/index.html", mode='r') as template_file:
    INDEX_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/index_entry.html", mode='r') as template_file:
    BLOG_ENTRY_INDEX_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/index_entry_tags.html", mode='r') as template_file:
    BLOG_ENTRY_INDEX_TAGS_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/main_page.html", mode='r') as template_file:
    MAIN_PAGE_TEMPLATE = Template(template_file.read())

with open(f"{TEMPLATE_FOLDER}/blog_index.html", mode='r') as template_file:
    BLOG_INDEX_TEMPLATE = Template(template_file.read())


def create_blog_entry_file(entry):
    """
    Creates an individual blog entry HTML file from a parsed entry.
    """

    # The HTML to display the entry tags.
    entry_tag_list_html = ""
    # The HTML to display the entry tag list.
    entry_tags_html = ""
    # The full page HTML. This is the Index HTML baked in to the main page template.
    full_file_html = ""

    # If there are tags in this entry, create the tag HTML.
    if entry["tags"]:
        for tag in entry["tags"]:
            tag_link = f"/blog/tag/{tag['filename']}.html"
            entry_tag_list_html += f"<li><a href=\"{tag_link}\">{tag['name']}</a></li>"

        entry_tags_html = BLOG_ENTRY_TAGS_TEMPLATE.substitute(
            entry_tag_list=entry_tag_list_html
        )

    # The formatted creation date.
    date_created = entry["date_created"].strftime("%Y.%m.%d")

    # An array of tag names.
    tag_names = list(map(lambda tag: tag['name'], entry['tags']))
    # The meta keywords string.
    page_keywords_string = ", ".join(tag_names)

    # The final resulting entry HTML.
    entry_html = BLOG_ENTRY_TEMPLATE.substitute(
        title=entry["title"],
        date=date_created,
        short=entry["short"],
        entry_body=entry["body"],
        entry_tags=entry_tags_html
    )

    # Create the full page HTML.
    full_file_html = MAIN_PAGE_TEMPLATE.substitute(
        page_title=f"{MAIN_PAGE_TITLE}/{entry['title']}",
        page_html=entry_html,
        copyright_text=COPYRIGHT_TEXT,
        page_meta_description=entry["short"],
        page_meta_author=PAGE_META_AUTHOR,
        page_meta_email=PAGE_META_EMAIL,
        page_meta_keywords=page_keywords_string
    )

    # The final filename for the blog entry HTML.
    blog_entry_filename = f"{DIST_BLOG_ENTRIES_FOLDER}/{entry['filename']}.html"
    with open(blog_entry_filename, 'x') as blog_entry_file:
        blog_entry_file.write(full_file_html)

    print(f"Wrote blog entry file: {blog_entry_filename}")


def create_tag_pages(tags):
    """
    Creates all of the individual tag index pages.
    """

    for tag in tags:
        # All of the entries tagged with this specific tag.
        tagged_entries = load_tagged_entries(tag)
        # The HTML for the blog entries in the index.
        index_entries_html = ""

        for entry in tagged_entries:
            # The formatted creation date.
            date_created = entry["date_created"].strftime("%Y.%m.%d")

            # For each entry generate the blog entry HTML and add this to the index
            # entries HTML string.
            index_entries_html += BLOG_ENTRY_INDEX_TEMPLATE.substitute(
                entry_link=f"/blog/{entry['filename']}.html",
                date=date_created,
                title=entry["title"],
                short=entry["short"],
                entry_tags=""
            )

        # Create the index HTML.
        index_html = BLOG_INDEX_TEMPLATE.substitute(
            heading=f"Entries tagged as '<span id=\"tag-index-name\">{tag['name']}</span>'",
            entries=index_entries_html
        )

        # The page meta description.
        tag_page_description = f"Blog entries marked {tag['name']}"

        # The full page HTML. This is the Index HTML baked in to the main page template.
        full_file_html = MAIN_PAGE_TEMPLATE.substitute(
            page_title=f"{MAIN_PAGE_TITLE}/{tag['name']}",
            page_html=index_html,
            copyright_text=COPYRIGHT_TEXT,
            page_meta_description=tag_page_description,
            page_meta_author=PAGE_META_AUTHOR,
            page_meta_email=PAGE_META_EMAIL,
            page_meta_keywords=tag['name']
        )

        # The final filename of the tag index HTML file.
        tag_index_filename = f"{DIST_FOLDER}/blog/tag/{tag['filename']}.html"
        with open(tag_index_filename, 'x') as index_file:
            index_file.write(full_file_html)

        print(f"Wrote tag index file: {tag_index_filename}")


def create_index_entry_html(entry):
    """
    Creates the HTML for an individual blog post entry in a blog index list.
    """

    # The link to the blog entry.
    entry_link = f"blog/{entry['filename']}.html"
    # The HTML to display the entry tags.
    entry_tag_list_html = ""
    # The HTML to display the entry tag list.
    entry_tags_html = ""

    # If there are tags in this entry, create the tag HTML.
    if entry["tags"]:
        for tag in entry["tags"]:
            entry_tag_link = f"blog/tag/{tag['filename']}.html"
            entry_tag_list_html += f"<li><a href=\"{entry_tag_link}\">{tag['name']}</a></li>"

        entry_tags_html = BLOG_ENTRY_INDEX_TAGS_TEMPLATE.substitute(
            entry_tag_list=entry_tag_list_html
        )

    # The formatted creation date.
    date_created = entry["date_created"].strftime("%Y.%m.%d")

    # For each entry generate the blog entry HTML and add this to the index entries
    # HTML string.
    return BLOG_ENTRY_INDEX_TEMPLATE.substitute(
        entry_link=entry_link,
        date=date_created,
        title=entry["title"],
        short=entry["short"],
        entry_tags=entry_tags_html
    )


def create_index(entries, tags):
    """
    Creates the site index.
    This will include only the specified number of 'latest' blog posts.
    """

    # The HTML for the blog entries in the index.
    index_entries_html = ""
    # The HTML for the site index.
    index_html = ""

    # For each entry generate the blog entry HTML and add this to the index entries HTML string.
    for entry in entries[0:MAIN_INDEX_BLOG_POST_LENGTH]:
        index_entries_html += create_index_entry_html(entry)

    # All of the tags used in the blog.
    tags = load_tags()
    # The HTML string used for the index tag list.
    index_tags_html = ""

    # Sort the tags by name, and create the tag link for each.
    for tag in sorted(tags, key=lambda tag: tag['name']):
        index_tags_html += f"<li><a href='/blog/tag/{tag['filename']}.html'>{tag['name']}</a></li>"

    # Create the index HTML.
    index_html = INDEX_TEMPLATE.substitute(
        blog_entries=index_entries_html,
        index_tag_links=index_tags_html
    )

    # The full page HTML. This is the Index HTML baked in to the main page template.
    full_file_html = MAIN_PAGE_TEMPLATE.substitute(
        page_title=MAIN_PAGE_TITLE,
        page_html=index_html,
        copyright_text=COPYRIGHT_TEXT,
        page_meta_description=PAGE_META_DEFAULT_DESCRIPTION,
        page_meta_author=PAGE_META_AUTHOR,
        page_meta_email=PAGE_META_EMAIL,
        page_meta_keywords=PAGE_META_DEFAULT_KEYWORDS
    )

    with open(f"{DIST_FOLDER}/index.html", 'x') as index_file:
        index_file.write(full_file_html)

    print("Wrote index.html")


def create_all_entry_index(entries):
    """
    Creates the 'All Blog Entries' page.
    """

    # The HTML for the blog entries in the index.
    index_entries_html = ""
    # The HTML for the site index.
    index_html = ""

    # For each entry generate the blog entry HTML and add this to the index entries HTML string.
    for entry in entries:
        index_entries_html += create_index_entry_html(entry)

    # Create the index HTML.
    index_html = BLOG_INDEX_TEMPLATE.substitute(
        heading="All Blog Entries",
        entries=index_entries_html
    )

    # The full page HTML. This is the Index HTML baked in to the main page template.
    full_file_html = MAIN_PAGE_TEMPLATE.substitute(
        page_title=f"{MAIN_PAGE_TITLE}/All Entries",
        page_html=index_html,
        copyright_text=COPYRIGHT_TEXT,
        page_meta_description="All Blog Entries",
        page_meta_author=PAGE_META_AUTHOR,
        page_meta_email=PAGE_META_EMAIL,
        page_meta_keywords=PAGE_META_DEFAULT_KEYWORDS
    )

    # The final filename of the tag index HTML file.
    tag_index_filename = f"{DIST_FOLDER}/blog/all.html"
    with open(tag_index_filename, 'x') as index_file:
        index_file.write(full_file_html)

    print(f"Wrote all blog entries index file: {tag_index_filename}")


def create_static_page(page):
    """
    Creates a static page file.
    """

    # Create the directory tree for the file path.
    full_page_path = f"{DIST_FOLDER}/{page['path']}"
    os.makedirs(os.path.dirname(full_page_path), exist_ok=True)

    with open(full_page_path, "w+") as page_file:
        full_file_html = MAIN_PAGE_TEMPLATE.substitute(
            page_title=page["title"],
            page_html=page["body"],
            copyright_text=COPYRIGHT_TEXT,
            page_meta_description=page["description"],
            page_meta_author=PAGE_META_AUTHOR,
            page_meta_email=PAGE_META_EMAIL,
            page_meta_keywords=PAGE_META_DEFAULT_KEYWORDS
        )

        page_file.write(full_file_html)

        print(f"Wrote static page file: {full_page_path}")


def are_templates_loaded():
    """
    Tests whether all templates have been loaded.
    """

    templates = [
        BLOG_ENTRY_TEMPLATE,
        BLOG_ENTRY_TAGS_TEMPLATE,
        BLOG_ENTRY_INDEX_TEMPLATE,
        BLOG_ENTRY_INDEX_TAGS_TEMPLATE,
        BLOG_INDEX_TEMPLATE,
        INDEX_TEMPLATE,
        MAIN_PAGE_TEMPLATE,
    ]

    for template in templates:
        if not template:
            return False

    return True



def main():
    """
    Main program.
    """

    # Exit in a failure condition if the templates have not been loaded.
    if not are_templates_loaded():
        raise ValueError("Templates are not loaded")

    # Load all of the individual blog entries from the database.
    blog_entries = load_blog_entries()

    # All of the tags used in the blog.
    blog_tags = load_tags()

    # Create all of the individual blog entry files.
    for entry in blog_entries:
        create_blog_entry_file(entry)

    # Creates the tag index pages.
    create_tag_pages(blog_tags)
    # Creates the site index.
    create_index(blog_entries, blog_tags)
    #Create the 'All Blog Entries' page
    create_all_entry_index(blog_entries)

    static_pages = load_static_pages()
    for page in static_pages:
        create_static_page(page)

if __name__ == "__main__":
    main()
