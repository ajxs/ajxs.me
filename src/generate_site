#!/usr/bin/env python3

"""
Generates all of the static content for the site, as part of the full deployment artefact.
This script generates all of the page content from the blog SQLite database.
"""

from datetime import datetime
import os
import chevron
from site_data import filter_unlisted_entries, load_blog_entries, load_tags, \
    load_tagged_entries, load_static_pages, load_static_redirect_pages

__author__ = "AJXS"
__copyright__ = "Copyright 2020, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The main title for the blog. This is used to create all of the
# <title>$page_title</title> elements.
MAIN_PAGE_TITLE = "~ajxs"
# The destination folder for the distributable artifacts.
DIST_FOLDER = f"{os.getcwd()}/docs"
# The base template folder.
TEMPLATE_FOLDER = f"{os.getcwd()}/src/templates"
# The destination folder for generated blog entries.
DIST_BLOG_ENTRIES_FOLDER = f"{DIST_FOLDER}/blog"

# Blog entry index link template.
BLOG_INDEX_ENTRY_TEMPLATE = None
# The template for a particular blog index.
BLOG_INDEX_TEMPLATE = None
# The main page template.
MAIN_PAGE_TEMPLATE = None
# The entry tag list template.
TAG_LIST_TEMPLATE = None

# The number of the latest blog posts to show on the main site index.
MAIN_INDEX_BLOG_POST_LENGTH = 10

# The default page keywords.
PAGE_META_DEFAULT_KEYWORDS = ["ajxs", "synthesisers", "programming"]

# The default page meta information.
# This object is used when rendering the main page template as the 'default' page meta
# information. It is overridden with page-specific values.
MAIN_PAGE_DEFAULT_META_INFO = {
    "page_title": MAIN_PAGE_TITLE,
    "footer_text": f"Â© {datetime.today().year} AJXS",
    "meta_description": "ajxs personal site",
    "meta_author": "ajxs",
    "meta_email": "ajxs@panoptic.online",
    "meta_keywords": ",".join(PAGE_META_DEFAULT_KEYWORDS)
}


with open(
    f"{TEMPLATE_FOLDER}/blog_index_entry.mustache",
    mode='r',
    encoding='utf-8'
) as template_file:
    BLOG_INDEX_ENTRY_TEMPLATE = template_file.read()

with open(
    f"{TEMPLATE_FOLDER}/index.mustache",
    mode='r',
    encoding='utf-8'
) as template_file:
    BLOG_INDEX_TEMPLATE = template_file.read()

with open(
    f"{TEMPLATE_FOLDER}/page.mustache",
    mode='r',
    encoding='utf-8'
) as template_file:
    MAIN_PAGE_TEMPLATE = template_file.read()

with open(
    f"{TEMPLATE_FOLDER}/tag_list.mustache",
    mode='r',
    encoding='utf-8'
) as template_file:
    TAG_LIST_TEMPLATE = template_file.read()


def create_blog_entry_file(entry):
    """
    Creates an individual blog entry HTML file from a parsed entry.
    Note that the 'contains_code_blocks' field is used to conditionally
    add the 'code blocks' CSS stylsheet to the page. This isn't added
    to entries by default due to its size.
    """

    # The full page HTML. This is the Index HTML baked in to the main page template.
    full_file_html = ""
    # An array of tag names.
    tag_names = list(map(lambda tag: tag['name'], entry['tags']))
    # The meta keywords string.
    page_keywords_string = ",".join(PAGE_META_DEFAULT_KEYWORDS + tag_names)

    # Create the entry HTML.
    with open(
        f"{TEMPLATE_FOLDER}/entry.mustache",
        mode='r',
        encoding='utf-8'
    ) as article_template_file:
        render_arguments = {
            "template": article_template_file,
            "partials_dict": {
                "tag_list": TAG_LIST_TEMPLATE,
            },
            "data": entry
        }

        entry_html = chevron.render(**render_arguments)

        # Create the full page HTML.
        full_file_html = chevron.render(MAIN_PAGE_TEMPLATE, {
            **MAIN_PAGE_DEFAULT_META_INFO,
            "page_title": f"{MAIN_PAGE_TITLE}/{entry['title']}",
            "meta_description": entry["description"],
            "meta_keywords": page_keywords_string,
            "page_body": entry_html,
            "contains_code_blocks": entry["contains_code_blocks"] == 1
        })

        # The final filename for the blog entry HTML.
        blog_entry_filename = f"{DIST_BLOG_ENTRIES_FOLDER}/{entry['filename']}.html"
        with open(blog_entry_filename, 'x', encoding='utf-8') as blog_entry_file:
            blog_entry_file.write(full_file_html)

        print(f"Wrote blog entry file: {blog_entry_filename}")


def create_blog_index_page(
    entries,
    tags,
    filename,
    heading=None,
    page_title=None,
    meta_description=None,
    show_tag_list=False,
    show_entry_tags=False,
    show_all_entries_link=False,
    additional_keywords=None
):
    """
    Creates a blog index page.
    This is used to create the individual tag, and all entries pages.
    """

    blog_index_render_arguments = {
        "template": BLOG_INDEX_TEMPLATE,
        "partials_dict": {
            "blog_index_entry": BLOG_INDEX_ENTRY_TEMPLATE,
            "tag_list": TAG_LIST_TEMPLATE
        },
        "data": {
            "entries": entries,
            "heading": heading,
            "show_all_entries_link": show_all_entries_link,
            "show_entry_tags": show_entry_tags,
            "show_tag_list": show_tag_list,
            "tags": sorted(tags, key=lambda tag: tag['name']),
        }
    }

    # Create the blog index HTML.
    blog_index_html = chevron.render(**blog_index_render_arguments)

    full_page_render_arguments = {
        **MAIN_PAGE_DEFAULT_META_INFO,
        "meta_keywords": ",".join(PAGE_META_DEFAULT_KEYWORDS),
        "page_body": blog_index_html,
        "contains_code_blocks": False
    }

    if additional_keywords:
        full_page_render_arguments["meta_keywords"] = ",".join(
            PAGE_META_DEFAULT_KEYWORDS + additional_keywords
        )

    if page_title:
        full_page_render_arguments['page_title'] = f"{MAIN_PAGE_TITLE}/{page_title}"

    if meta_description:
        full_page_render_arguments['meta_description'] = meta_description

    # The full page HTML. This is the Index HTML baked in to the main page template.
    full_file_html = chevron.render(MAIN_PAGE_TEMPLATE, full_page_render_arguments)

    with open(filename, 'x', encoding='utf-8') as index_file:
        index_file.write(full_file_html)

    print(f"Wrote blog index file: {filename}")


def create_static_page(page):
    """
    Creates a static page file.
    """

    # Create the directory tree for the file path.
    full_page_path = f"{DIST_FOLDER}/{page['path']}"
    os.makedirs(os.path.dirname(full_page_path), exist_ok=True)

    with open(full_page_path, "w+", encoding='utf-8') as page_file:
        full_file_html = chevron.render(MAIN_PAGE_TEMPLATE, {
            **MAIN_PAGE_DEFAULT_META_INFO,
            "meta_description": page["description"],
            "page_title": f"{MAIN_PAGE_TITLE}/{page['title']}",
            "page_body": page["body"],
            "contains_code_blocks": page["contains_code_blocks"] == 1
        })

        page_file.write(full_file_html)

        print(f"Wrote static page file: {full_page_path}")


def create_static_redirect_page(page_redirect):
    """
    Creates a static redirect page file.
    These entries represent static redirect HTML files, designed to perform a client-side
    redirect with a 'refresh' meta directive in the HTML header.
    These replace the older system of using symlinks to redirect on the server-side due to
    compatibility issues with non-Linux based webhosts.
    """

    # The page body for the redirect.
    # Ordinarily this should not be seen, however this exists as a fallback for
    # older browsers which do not automatically follow the redirect in the HTML header.
    page_body = f"""
        <p>
            The page you're looking for has moved.<br/>
            If you are not redirected automatically please
            <a href=\"{page_redirect['address_to']}\">click here</a>.
        </p>
        """

    # Remove the leading/trailing newlines, and replace the implicit spacing introduced
    # by this file with tabs to match the destination HTML.
    page_body = page_body.strip().replace('    ', '\t')

    # Create the directory tree for the file path.
    from_page_path = f"{DIST_FOLDER}/{page_redirect['address_from']}"
    os.makedirs(os.path.dirname(from_page_path), exist_ok=True)

    with open(from_page_path, "w+", encoding='utf-8') as page_file:
        full_file_html = chevron.render(MAIN_PAGE_TEMPLATE, {
            **MAIN_PAGE_DEFAULT_META_INFO,
            "page_body": page_body,
            "redirect": page_redirect['address_to']
        })

        page_file.write(full_file_html)

        print(f"Wrote static redirect page file: {from_page_path}")


def main():
    """
    Main program.
    """

    # Load all of the individual blog entries from the database.
    blog_entries = load_blog_entries()
    # All of the tags used in the blog.
    blog_tags = load_tags()

    # Create all of the individual blog entry files.
    for entry in blog_entries:
        create_blog_entry_file(entry)

    # Create the tag index pages.
    for tag in blog_tags:
        tagged_entries = load_tagged_entries(tag)

        create_blog_index_page(
            filter_unlisted_entries(tagged_entries),
            blog_tags,
            f"{DIST_FOLDER}/blog/tag/{tag['filename']}.html",
            heading=f"Blog entries tagged as '<span id=\"tag-index-name\">{tag['name']}</span>'",
            page_title=tag['name'],
            meta_description=f"Blog entries marked {tag['name']}",
            additional_keywords=[tag['name']]
        )

    #Create the 'All Blog Entries' page
    create_blog_index_page(
        filter_unlisted_entries(blog_entries),
        blog_tags,
        f"{DIST_FOLDER}/blog/all.html",
        heading="All Blog Entries",
        page_title="All Blog Entries",
        meta_description="All Blog Entries",
        show_entry_tags=True
    )

    # Create the site index.
    create_blog_index_page(
        filter_unlisted_entries(blog_entries)[0:MAIN_INDEX_BLOG_POST_LENGTH],
        blog_tags,
        f"{DIST_FOLDER}/index.html",
        show_all_entries_link=True,
        show_tag_list=True,
        show_entry_tags=True
    )

    static_pages = load_static_pages()
    for page in static_pages:
        create_static_page(page)

    static_redirect_pages = load_static_redirect_pages()
    for redirect_page in static_redirect_pages:
        create_static_redirect_page(redirect_page)

if __name__ == "__main__":
    main()
