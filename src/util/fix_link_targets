#!/usr/bin/env python3

"""
Parses an XHTML document, ensuring that all external links are opened in a new tab.
"""

import getopt
import sys
from lxml import etree

__author__ = "AJXS"
__copyright__ = "Copyright 2024, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The input, and output files used by the script.
INPUT_FILE = None
OUTPUT_FILE = None


def parse_links(file_text):
    """
    Parses the file text, looking for <a> elements that point to an external URL.
    Every external link is then checked to ensure it opens in a new tab.
    """

    # The root HTML element.
    root = etree.HTML(file_text)

    # A list of all anchor elements
    link_list = root.xpath("//a")
    for link in link_list:
        link_href = link.get('href')

        if link_href and not link_href.startswith("#") and not link.get("target"):
            print(
                f"Fixing link target attribute for link with href '{link_href}'",
                file=sys.stderr
            )
            link.set("target", "_blank")

    return etree.tostring(root)


def main():
    """
    Main external link parsing program.
    """

    transformed_html = None

    try:
        # Note that these two 'open' statements need to be separate,
        # as the input and output files may be identical.
        if INPUT_FILE is None:
            transformed_html = parse_links(sys.stdin.read())
        else:
            with open(INPUT_FILE, 'r') as input_file:
                transformed_html = parse_links(input_file.read())

        if OUTPUT_FILE == None:
            print(transformed_html.decode("utf-8"))
        else:
            with open(OUTPUT_FILE, 'wb+') as output_file:
                output_file.write(transformed_html)

    except FileNotFoundError:
        print("Error: Unable to open files. Exiting.", file=sys.stderr)
        exit(1)


def print_usage():
    """Prints script usage to STDOUT."""

    print(
        "Usage: fix_link_targets --input_file <string> --output_file <string>",
        file=sys.stderr
    )


if __name__ == "__main__":
    try:
        OPTS, ARGS = getopt.getopt(
            sys.argv[1:],
            "h",
            [
                "input_file=",
                "output_file=",
            ]
        )
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in OPTS:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt == "--input_file":
            INPUT_FILE = arg
        elif opt == "--output_file":
            OUTPUT_FILE = arg

    main()
