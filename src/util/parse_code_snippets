#!/usr/bin/env python3

"""
Parses <code-snippet> elements in a HTML file, and transforms them into
highlighted code blocks using Pygments.
"""

import getopt
import sys
from lxml import etree
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter

__author__ = "AJXS"
__copyright__ = "Copyright 2024, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The input, and output files used by the script.
INPUT_FILE = None
OUTPUT_FILE = None

def parse_code_snippets(file_text):
    """
    Parses <code-snippet> elements in a HTML file, and transforms them into
    highlighted code blocks using Pygments.
    """

    # The root HTML element.
    root = etree.HTML(file_text)

    PRINT_LINE_NUMBERS = False

    # A list of all code snippet elements
    code_snippets = root.xpath("//code-snippet")
    for code_snippet in code_snippets:
        code_snippet_file_path = code_snippet.get("path")
        language_name = code_snippet.get("language-name")
        lexer = get_lexer_by_name(language_name)

        with open(code_snippet_file_path, "r", encoding="utf-8") as code_snippet_file:
            code_snippet_text = code_snippet_file.read()

            highlighted_code_string = highlight(
                code_snippet_text,
                lexer,
                HtmlFormatter(
                    linenos=PRINT_LINE_NUMBERS,
                    cssclass="code-block"
                )
            )

            highlighted_code_element = etree.fromstring(highlighted_code_string)

            code_snippet_parent = code_snippet.getparent()
            code_snippet_index = code_snippet_parent.index(code_snippet)

            code_snippet_parent.insert(
                code_snippet_index,
                highlighted_code_element
            )
            code_snippet_parent.remove(code_snippet)

    return etree.tostring(root)


def main():
    """
    Main external link parsing program.
    """

    transformed_html = None

    try:
        # Note that these two 'open' statements need to be separate,
        # as the input and output files may be identical.
        if INPUT_FILE is None:
            transformed_html = parse_code_snippets(sys.stdin.read())
        else:
            with open(INPUT_FILE, "r", encoding="utf-8") as input_file:
                transformed_html = parse_code_snippets(input_file.read())

        if OUTPUT_FILE is None:
            print(transformed_html.decode("utf-8"))
        else:
            with open(OUTPUT_FILE, "wb+", encoding="utf-8") as output_file:
                output_file.write(transformed_html)

    except FileNotFoundError:
        print("Error: Unable to open files. Exiting.", file=sys.stderr)
        sys.exit(1)


def print_usage():
    """Prints script usage to STDOUT."""

    print(
        "Usage: fix_link_targets --input_file <string> --output_file <string>",
        file=sys.stderr
    )


if __name__ == "__main__":
    try:
        OPTS, ARGS = getopt.getopt(
            sys.argv[1:],
            "h",
            [
                "input_file=",
                "output_file=",
            ]
        )
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in OPTS:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt == "--input_file":
            INPUT_FILE = arg
        elif opt == "--output_file":
            OUTPUT_FILE = arg

    main()
