#!/usr/bin/env python3

"""
Parses a HTML draft article document, transforming it into the final format
suitable for publishing.
This transforms custom <code-snippet> and <footnote> elements, and ensures any
external links open in a new tab.
"""

import getopt
import sys
from lxml import html
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter

__author__ = "AJXS"
__copyright__ = "Copyright 2021, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The input, and output files used by the script.
INPUT_FILE = None
OUTPUT_FILE = None


def parse_footnotes(file_text):
    """
    Parses the file text, looking for <footnote> elements. Every found footnote element
    is transformed into the proper format.
    """

    # The root HTML element.
    root = html.document_fromstring(file_text)

    # The current 'number' of the footnote. This is used to create the actual footnote
    # numbering, and text. This is incremented for each footnote parsed.
    current_footnote_number = 1

    # The footnote 'list' at the end of the article.
    footnote_list = root.xpath("//ol[@class='footnotes']")
    if not footnote_list:
        return html.tostring(root)

    # The footnote 'marker' elements found in the text body.
    footnote_markers = root.xpath("//footnote")
    for footnote_marker in footnote_markers:
        # The unique id of the current footnote being parsed.
        footnote_id = footnote_marker.get("id")
        print(f"Parsing footnote id: {footnote_id}", file=sys.stderr)

        # The placeholder 'body' associated with this footnote, in the 'footnotes' element.
        footnote_body = footnote_list[0].find(f"footnote_body[@id='{footnote_id}']")
        if footnote_body is None:
            raise ValueError(f"Unable to find body associated with footnote: {footnote_id}")

        # The final footnote 'body' element.
        footnote_body_element = html.Element("li")
        footnote_body_element.set("id", f"footnote_{current_footnote_number}")

        # Populate the footnote element's content.
        # Add the original element's first text node to the new element, and then add
        # any addition children elements.
        footnote_body_element.text = footnote_body.text
        for child_element in footnote_body.iterchildren():
            footnote_body_element.append(child_element)

        # Create the 'return' link, which will take the user back to the original footnote.
        footnote_return_link = html.Element("a")
        footnote_return_link.set("href", f"#footnote_{current_footnote_number}_link")
        footnote_return_link.text = "â†²"

        # If the last child of the footnote body is a paragraph, append the return link to it.
        # Otherwise just append it to the body of the footnote element.
        footnote_body_children = list(footnote_body_element)
        if footnote_body_children and footnote_body_children[-1].tag == "p":
            footnote_body_children[-1].append(footnote_return_link)
        else:
            footnote_body_element.append(footnote_return_link)

        # Append the final body element, and remove the text definition.
        # Note thatthe footnote body element shouldn't have any tail text.
        footnote_list[0].append(footnote_body_element)
        footnote_list[0].remove(footnote_body)

        # Create the footnote link.
        footnote_link = html.Element("sup")
        footnote_link.tail = footnote_marker.tail
        footnote_link_anchor = html.Element("a")
        footnote_link_anchor.set("href", f"#footnote_{current_footnote_number}")
        footnote_link_anchor.set("id", f"footnote_{current_footnote_number}_link")
        footnote_link_anchor.text = f"{current_footnote_number}"

        footnote_link.append(footnote_link_anchor)

        # Add the newly created footnote link _after_ the marker, then delete the marker.
        footnote_marker.addnext(footnote_link)
        footnote_marker_parent = footnote_marker.getparent()
        footnote_marker_parent.remove(footnote_marker)

        current_footnote_number = current_footnote_number + 1

    return html.tostring(root)


def parse_links(file_text):
    """
    Parses the file text, looking for <a> elements that point to an external URL.
    Every external link is then checked to ensure it opens in a new tab.
    """

    # The root HTML element.
    root = html.document_fromstring(file_text)

    # A list of all anchor elements
    link_list = root.xpath("//a")
    for link in link_list:
        link_href = link.get('href')

        if link_href and not link_href.startswith("#") and not link.get("target"):
            print(
                f"Fixing link target attribute for link with href '{link_href}'",
                file=sys.stderr
            )
            link.set("target", "_blank")

    return html.tostring(root)


def parse_code_snippets(file_text):
    """
    Parses <code-snippet> elements in a HTML file, and transforms them into
    highlighted code blocks using Pygments.
    """

    # The root HTML element.
    root = html.document_fromstring(file_text)

    PRINT_LINE_NUMBERS = False

    # A list of all code snippet elements
    code_snippets = root.xpath("//code-snippet")
    for code_snippet in code_snippets:
        code_snippet_file_path = code_snippet.get("path")
        language_name = code_snippet.get("language-name")
        lexer = get_lexer_by_name(language_name)
        if lexer is None:
            raise ValueError(f"Unable to find lexer for language: {language_name}")

        with open(code_snippet_file_path, "r", encoding="utf-8") as code_snippet_file:
            code_snippet_text = code_snippet_file.read()

            highlighted_code_string = highlight(
                code_snippet_text,
                lexer,
                HtmlFormatter(
                    linenos=PRINT_LINE_NUMBERS,
                    cssclass="code-block"
                )
            )

            highlighted_code_element = html.fragment_fromstring(highlighted_code_string)
            highlighted_code_element.tail = code_snippet.tail

            code_snippet_parent = code_snippet.getparent()
            code_snippet_index = code_snippet_parent.index(code_snippet)

            code_snippet_parent.insert(
                code_snippet_index,
                highlighted_code_element
            )

            code_snippet_parent.remove(code_snippet)


    return html.tostring(root)


def main():
    """
    Main external link parsing program.
    """

    transformed_html = None

    try:
        file_text = None

        # Note that these two 'open' statements need to be separate,
        # as the input and output files may be identical.
        if INPUT_FILE is None:
            file_text = sys.stdin.read()
        else:
            with open(INPUT_FILE, "r", encoding="utf-8") as input_file:
                file_text = input_file.read()

        transformed_html = file_text.encode("utf-8")
        transformed_html = parse_code_snippets(file_text)
        transformed_html = parse_footnotes(transformed_html)
        transformed_html = parse_links(transformed_html)

        if OUTPUT_FILE is None:
            print(transformed_html.decode("utf-8"))
        else:
            with open(OUTPUT_FILE, "wb+", encoding="utf-8") as output_file:
                output_file.write(transformed_html)

    except FileNotFoundError:
        print("Error: Unable to open files. Exiting.", file=sys.stderr)
        sys.exit(1)


def print_usage():
    """Prints script usage to STDOUT."""

    print(
        "Usage: process_draft_text --input_file <string> --output_file <string>"
    )


if __name__ == "__main__":
    try:
        OPTS, ARGS = getopt.getopt(
            sys.argv[1:],
            "h",
            [
                "input_file=",
                "output_file=",
            ]
        )
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in OPTS:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt == "--input_file":
            INPUT_FILE = arg
        elif opt == "--output_file":
            OUTPUT_FILE = arg

    main()
