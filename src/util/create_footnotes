#!/usr/bin/env python3

"""
Parses an XHTML document, transforming the shorthand footnote markup into the final
valid HTML footnotes used in the blog.
"""

import getopt
import sys
from lxml import etree

__author__ = "AJXS"
__copyright__ = "Copyright 2021, AJXS"
__credits__ = ["AJXS"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "AJXS"
__email__ = "ajxs at panoptic.online"
__status__ = "Production"

# The input, and output files used by the script.
INPUT_FILE = None
OUTPUT_FILE = None


def parse_footnotes(file_text):
    """
    Parses the file text, looking for <footnote> elements. Every found footnote element
    is transformed into the proper format.
    """

    # The root HTML element.
    root = etree.HTML(file_text)

    # The current 'number' of the footnote. This is used to create the actual footnote
    # numbering, and text. This is incremented for each footnote parsed.
    current_footnote_number = 1

    # The footnote 'list' at the end of the article.
    footnote_list = root.xpath("//ol[@class='footnotes']")
    if not footnote_list:
        raise ValueError("Unable to find footnote list.")

    # The footnote 'marker' elements found in the text body.
    footnote_markers = root.xpath("//footnote")
    for footnote_marker in footnote_markers:
        # The unique id of the current footnote being parsed.
        footnote_id = footnote_marker.get("id")
        print(f"Parsing footnote id: {footnote_id}")

        # The placeholder 'body' associated with this footnote, in the 'footnotes' element.
        footnote_body = footnote_list[0].find(f"footnote_body[@id='{footnote_id}']")
        if footnote_body is None:
            raise ValueError(f"Unable to find body associated with footnote: {footnote_id}")

        # The final footnote 'body' element.
        footnote_body_element = etree.Element("li")
        footnote_body_element.set("id", f"footnote_{current_footnote_number}")

        # Populate the footnote element's content.
        # Add the original element's first text node to the new element, and then add
        # any addition children elements.
        footnote_body_element.text = footnote_body.text
        for child_element in footnote_body.iterchildren():
            footnote_body_element.append(child_element)

        # Create the 'return' link, which will take the user back to the original footnote.
        footnote_return_link = etree.SubElement(footnote_body_element, "a")
        footnote_return_link.set("href", f"#footnote_{current_footnote_number}_link")
        footnote_return_link.text = "â†²"

        # Append the final body element, and remove the text definition.
        footnote_list[0].append(footnote_body_element)
        footnote_list[0].remove(footnote_body)

        # Create the footnote link.
        footnote_link = etree.Element("sup")
        footnote_link_anchor = etree.SubElement(footnote_link, "a")
        footnote_link_anchor.set("href", f"#footnote_{current_footnote_number}")
        footnote_link_anchor.set("id", f"footnote_{current_footnote_number}_link")
        footnote_link_anchor.text = f"{current_footnote_number}"

        # Add the newly created footnote link _after_ the marker, then delete the marker.
        footnote_marker.addnext(footnote_link)
        footnote_marker_parent = footnote_marker.getparent()
        footnote_marker_parent.remove(footnote_marker)

        current_footnote_number = current_footnote_number + 1

    return etree.tostring(root)


def main():
    """
    Main footnote parsing program.
    """

    try:
        with open(INPUT_FILE, 'r') as input_file, open(OUTPUT_FILE, 'wb+') as output_file:
            transformed_html = parse_footnotes(input_file.read())
            output_file.write(transformed_html)

    except FileNotFoundError:
        print("Error: Unable to open files. Exiting.", file=sys.stderr)
        exit(1)


def print_usage():
    """Prints script usage to STDOUT."""

    print(
        "Usage: parse_footnotes --input_file <string> --output_file <string>"
    )


if __name__ == "__main__":
    try:
        OPTS, ARGS = getopt.getopt(
            sys.argv[1:],
            "h",
            [
                "input_file=",
                "output_file=",
            ]
        )
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in OPTS:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt == "--input_file":
            INPUT_FILE = arg
        elif opt == "--output_file":
            OUTPUT_FILE = arg

    if INPUT_FILE is None:
        print("Invalid input file provided! Exiting.")
        exit(1)

    if OUTPUT_FILE is None:
        print("Invalid output file provided! Exiting.")
        exit(1)

    main()
